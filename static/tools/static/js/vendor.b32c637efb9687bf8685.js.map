{"version":3,"sources":["webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/vue-meta/dist/vue-meta.esm.js","webpack:///./node_modules/deepmerge/dist/cjs.js"],"names":["g","this","Function","eval","e","window","module","exports","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","type","default","hook","options","render","staticRenderFns","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","existing","beforeCreate","_injectStyles","h","concat","global","__WEBPACK_IMPORTED_MODULE_0_deepmerge__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_0_deepmerge___default","n","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","TypeError","_nonIterableSpread","o","minLen","toString","slice","name","test","len","arr2","arg","isUndefined","isObject","isPureObject","isFunction","console","hasGlobalWindowFn","warn","str","showWarningNotSupported","defaultInfo","title","undefined","titleChunk","titleTemplate","htmlAttrs","bodyAttrs","headAttrs","base","link","meta","style","script","noscript","__dangerouslyDisableSanitizers","__dangerouslyDisableSanitizersByTagID","rootConfigKey","defaultOptions","keyName","attribute","ssrAttribute","tagIDKeyName","contentKeyName","metaTemplateKeyName","waitOnDestroyed","debounceWait","ssrAppId","defaultInfoKeys","disableOptionKeys","metaInfoOptionKeys","metaInfoAttributeKeys","tagsSupportingOnload","tagsWithoutEndTag","tagsWithInnerContent","tagAttributeAsInnerContent","tagProperties","commonDataAttributes","booleanHtmlAttributes","batchId","triggerUpdate","_ref","rootVm","hookName","initialized","initializing","pausing","callback","timeout","clearTimeout","setTimeout","batchUpdate","$meta","refresh","findIndex","array","predicate","thisArg","idx","toArray","includes","querySelector","el","document","querySelectorAll","getTag","tags","tag","getElementsByTagName","queryElements","parentNode","_ref2","attributes","appId","queries","map","query","val","attributeValue","join","removeAttribute","attributeName","hasMetaInfo","vm","pause","resume","addNavGuards","router","$router","navGuards","beforeEach","to","next","afterEach","$nextTick","metaInfo","afterNavigation","createMixin","Vue","updateOnLifecycleHook","wasServerRendered","_this2","$root","$options","devtoolsEnabled","config","devtools","get","deprecationWarningShown","$once","$el","nodeType","hasAttribute","htmlTag","child","find","$children","c","fnOptions","$parent","computed","$metaInfo","$isServer","$on","$watch","initializedSsr","_$root$$meta$refresh","refreshOnceOnNavigation","_this","_hasMetaInfo","offsetParent","interval","setInterval","clearInterval","lifecycleHook","setOptions","ensureIsArray","serverSequences","clientSequences","escapeMetaInfo","info","escapeSequences","escapeOptions","doEscape","reduce","seq","replace","disableKey","index","escape","escapeKeys","_escapeOptions$doEsca","v","escaped","tagId","escapedKey","applyTemplate","headObject","template","chunk","component","warningShown","merge","attrKey","arrayMerge","t","s","destination","targetItem","targetIndex","sourceIndex","item","sourceItem","innerHTML","splice","targetTemplate","getComponentMetaInfo","getComponentOption","result","_inactive","_options","data","childComponent","inMetaInfoBranch","callbacks","addCallbacks","autoAddListeners","hasAsyncCallback","addCallback","addListeners","d","readyState","onreadystatechange","applyCallbacks","matchElement","args","selector","elements","matches","element","__vm_cb","onload","__vm_l","__vm_ev","addEventListener","appsMetaInfo","attributeMap","updateAttribute","attrs","vueMetaAttrString","getAttribute","JSON","parse","decodeURI","toUpdate","attr","_attr","attrData","_i","_toUpdate","_attr2","_attrData","attrValues","_appId","attrValue","some","Boolean","setAttribute","updateTag","head","body","dataAttributes","newElements","queryOptions","currentElements","pbody","found","x","k","stringify","res","skip","newElement","createElement","once","isBooleanAttribute","styleSheet","cssText","appendChild","createTextNode","json","indexToDelete","oldElements","existingTag","isEqualNode","_type","removeChild","insertBefore","firstChild","oldTags","newTags","updateClientMetaInfo","newInfo","addLoadListeners","tagsAdded","tagsRemoved","tagName","substr","_updateTag","addApp","set","setMetaInfo","remove","_step","_iterator","allowArrayLike","it","F","done","f","err","normalCompletion","didErr","step","return","_createForOfIteratorHelper","_ref3","removeElementsByAppId","clearAppsMetaInfo","removeMetaInfo","getAppsMetaInfo","force","getMetaInfo","metaItem","metaObject","tagGenerator","generatorOptions","_ref2$isSSR","isSSR","_ref2$body","_ref2$pbody","_ref2$ln","ln","tagsStr","prefix","isBooleanAttr","content","hasEndTag","hasContent","generateServerInjector","globalInjectOptions","serverInjector","extraData","addInfo","callInjectors","opts","m","injectors","text","bodyPrepend","bodyAppend","_loop","injectOptions","addSsrAttribute","titleGenerator","attributeData","_data","attributeStr","encodeURI","attributeGenerator","_appId2","_data2","extraStr","getOptions","optionsCopy","newOptions","parseInt","isNaN","changed","addedTags","removedTags","additionalAppId","inject","version","install","__vuemeta_installed","mixin","generate","rawInfo","__webpack_exports__","isMergeableObject","isNonNullObject","stringValue","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","deepmerge","defaultArrayMerge","getKeys","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","property","_","mergeObject","hasOwnProperty","propertyIsUnsafe","customMerge","getMergeFunction","sourceIsArray","all","Error","prev","deepmerge_1"],"mappings":"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","file":"static/js/vendor.b32c637efb9687bf8685.js","sourcesContent":["var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = DuR2\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = VU/8\n// module chunks = 0","/**\n * vue-meta v2.4.0\n * (c) 2020\n * - Declan de Wet\n * - Sébastien Chopin (@Atinux)\n * - Pim (@pimlie)\n * - All the amazing contributors\n * @license MIT\n */\n\nimport deepmerge from 'deepmerge';\n\nvar version = \"2.4.0\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n/**\n * checks if passed argument is an array\n * @param  {any}  arg - the object to check\n * @return {Boolean} - true if `arg` is an array\n */\nfunction isArray(arg) {\n  return Array.isArray(arg);\n}\nfunction isUndefined(arg) {\n  return typeof arg === 'undefined';\n}\nfunction isObject(arg) {\n  return _typeof(arg) === 'object';\n}\nfunction isPureObject(arg) {\n  return _typeof(arg) === 'object' && arg !== null;\n}\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction hasGlobalWindowFn() {\n  try {\n    return !isUndefined(window);\n  } catch (e) {\n    return false;\n  }\n}\nvar hasGlobalWindow = hasGlobalWindowFn();\n\nvar _global = hasGlobalWindow ? window : global;\n\nvar console = _global.console || {};\nfunction warn(str) {\n  /* istanbul ignore next */\n  if (!console || !console.warn) {\n    return;\n  }\n\n  console.warn(str);\n}\nvar showWarningNotSupported = function showWarningNotSupported() {\n  return warn('This vue app/component has no vue-meta configuration');\n};\n\n/**\n * These are constant variables used throughout the application.\n */\n// set some sane defaults\nvar defaultInfo = {\n  title: undefined,\n  titleChunk: '',\n  titleTemplate: '%s',\n  htmlAttrs: {},\n  bodyAttrs: {},\n  headAttrs: {},\n  base: [],\n  link: [],\n  meta: [],\n  style: [],\n  script: [],\n  noscript: [],\n  __dangerouslyDisableSanitizers: [],\n  __dangerouslyDisableSanitizersByTagID: {}\n};\nvar rootConfigKey = '_vueMeta'; // This is the name of the component option that contains all the information that\n// gets converted to the various meta tags & attributes for the page.\n\nvar keyName = 'metaInfo'; // This is the attribute vue-meta arguments on elements to know which it should\n// manage and which it should ignore.\n\nvar attribute = 'data-vue-meta'; // This is the attribute that goes on the `html` tag to inform `vue-meta`\n// that the server has already generated the meta tags for the initial render.\n\nvar ssrAttribute = 'data-vue-meta-server-rendered'; // This is the property that tells vue-meta to overwrite (instead of append)\n// an item in a tag list. For example, if you have two `meta` tag list items\n// that both have `vmid` of \"description\", then vue-meta will overwrite the\n// shallowest one with the deepest one.\n\nvar tagIDKeyName = 'vmid'; // This is the key name for possible meta templates\n\nvar metaTemplateKeyName = 'template'; // This is the key name for the content-holding property\n\nvar contentKeyName = 'content'; // The id used for the ssr app\n\nvar ssrAppId = 'ssr'; // How long meta update\n\nvar debounceWait = 10; // How long meta update\n\nvar waitOnDestroyed = true;\nvar defaultOptions = {\n  keyName: keyName,\n  attribute: attribute,\n  ssrAttribute: ssrAttribute,\n  tagIDKeyName: tagIDKeyName,\n  contentKeyName: contentKeyName,\n  metaTemplateKeyName: metaTemplateKeyName,\n  waitOnDestroyed: waitOnDestroyed,\n  debounceWait: debounceWait,\n  ssrAppId: ssrAppId\n}; // might be a bit ugly, but minimizes the browser bundles a bit\n\nvar defaultInfoKeys = Object.keys(defaultInfo); // The metaInfo property keys which are used to disable escaping\n\nvar disableOptionKeys = [defaultInfoKeys[12], defaultInfoKeys[13]]; // List of metaInfo property keys which are configuration options (and dont generate html)\n\nvar metaInfoOptionKeys = [defaultInfoKeys[1], defaultInfoKeys[2], 'changed'].concat(disableOptionKeys); // List of metaInfo property keys which only generates attributes and no tags\n\nvar metaInfoAttributeKeys = [defaultInfoKeys[3], defaultInfoKeys[4], defaultInfoKeys[5]]; // HTML elements which support the onload event\n\nvar tagsSupportingOnload = ['link', 'style', 'script']; // HTML elements which dont have a head tag (shortened to our needs)\n// see: https://www.w3.org/TR/html52/document-metadata.html\n\nvar tagsWithoutEndTag = ['base', 'meta', 'link']; // HTML elements which can have inner content (shortened to our needs)\n\nvar tagsWithInnerContent = ['noscript', 'script', 'style']; // Attributes which are inserted as childNodes instead of HTMLAttribute\n\nvar tagAttributeAsInnerContent = ['innerHTML', 'cssText', 'json'];\nvar tagProperties = ['once', 'skip', 'template']; // Attributes which should be added with data- prefix\n\nvar commonDataAttributes = ['body', 'pbody']; // from: https://github.com/kangax/html-minifier/blob/gh-pages/src/htmlminifier.js#L202\n\nvar booleanHtmlAttributes = ['allowfullscreen', 'amp', 'amp-boilerplate', 'async', 'autofocus', 'autoplay', 'checked', 'compact', 'controls', 'declare', 'default', 'defaultchecked', 'defaultmuted', 'defaultselected', 'defer', 'disabled', 'enabled', 'formnovalidate', 'hidden', 'indeterminate', 'inert', 'ismap', 'itemscope', 'loop', 'multiple', 'muted', 'nohref', 'noresize', 'noshade', 'novalidate', 'nowrap', 'open', 'pauseonexit', 'readonly', 'required', 'reversed', 'scoped', 'seamless', 'selected', 'sortable', 'truespeed', 'typemustmatch', 'visible'];\n\nvar batchId = null;\nfunction triggerUpdate(_ref, rootVm, hookName) {\n  var debounceWait = _ref.debounceWait;\n\n  // if an update was triggered during initialization or when an update was triggered by the\n  // metaInfo watcher, set initialized to null\n  // then we keep falsy value but know we need to run a triggerUpdate after initialization\n  if (!rootVm[rootConfigKey].initialized && (rootVm[rootConfigKey].initializing || hookName === 'watcher')) {\n    rootVm[rootConfigKey].initialized = null;\n  }\n\n  if (rootVm[rootConfigKey].initialized && !rootVm[rootConfigKey].pausing) {\n    // batch potential DOM updates to prevent extraneous re-rendering\n    // eslint-disable-next-line no-void\n    batchUpdate(function () {\n      return void rootVm.$meta().refresh();\n    }, debounceWait);\n  }\n}\n/**\n * Performs a batched update.\n *\n * @param  {(null|Number)} id - the ID of this update\n * @param  {Function} callback - the update to perform\n * @return {Number} id - a new ID\n */\n\nfunction batchUpdate(callback, timeout) {\n  timeout = timeout === undefined ? 10 : timeout;\n\n  if (!timeout) {\n    callback();\n    return;\n  }\n\n  clearTimeout(batchId);\n  batchId = setTimeout(function () {\n    callback();\n  }, timeout);\n  return batchId;\n}\n\n/*\n * To reduce build size, this file provides simple polyfills without\n * overly excessive type checking and without modifying\n * the global Array.prototype\n * The polyfills are automatically removed in the commonjs build\n * Also, only files in client/ & shared/ should use these functions\n * files in server/ still use normal js function\n */\nfunction find(array, predicate, thisArg) {\n  if ( !Array.prototype.find) {\n    // idx needs to be a Number, for..in returns string\n    for (var idx = 0; idx < array.length; idx++) {\n      if (predicate.call(thisArg, array[idx], idx, array)) {\n        return array[idx];\n      }\n    }\n\n    return;\n  }\n\n  return array.find(predicate, thisArg);\n}\nfunction findIndex(array, predicate, thisArg) {\n  if ( !Array.prototype.findIndex) {\n    // idx needs to be a Number, for..in returns string\n    for (var idx = 0; idx < array.length; idx++) {\n      if (predicate.call(thisArg, array[idx], idx, array)) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }\n\n  return array.findIndex(predicate, thisArg);\n}\nfunction toArray(arg) {\n  if ( !Array.from) {\n    return Array.prototype.slice.call(arg);\n  }\n\n  return Array.from(arg);\n}\nfunction includes(array, value) {\n  if ( !Array.prototype.includes) {\n    for (var idx in array) {\n      if (array[idx] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return array.includes(value);\n}\n\nvar querySelector = function querySelector(arg, el) {\n  return (el || document).querySelectorAll(arg);\n};\nfunction getTag(tags, tag) {\n  if (!tags[tag]) {\n    tags[tag] = document.getElementsByTagName(tag)[0];\n  }\n\n  return tags[tag];\n}\nfunction getElementsKey(_ref) {\n  var body = _ref.body,\n      pbody = _ref.pbody;\n  return body ? 'body' : pbody ? 'pbody' : 'head';\n}\nfunction queryElements(parentNode, _ref2, attributes) {\n  var appId = _ref2.appId,\n      attribute = _ref2.attribute,\n      type = _ref2.type,\n      tagIDKeyName = _ref2.tagIDKeyName;\n  attributes = attributes || {};\n  var queries = [\"\".concat(type, \"[\").concat(attribute, \"=\\\"\").concat(appId, \"\\\"]\"), \"\".concat(type, \"[data-\").concat(tagIDKeyName, \"]\")].map(function (query) {\n    for (var key in attributes) {\n      var val = attributes[key];\n      var attributeValue = val && val !== true ? \"=\\\"\".concat(val, \"\\\"\") : '';\n      query += \"[data-\".concat(key).concat(attributeValue, \"]\");\n    }\n\n    return query;\n  });\n  return toArray(querySelector(queries.join(', '), parentNode));\n}\nfunction removeElementsByAppId(_ref3, appId) {\n  var attribute = _ref3.attribute;\n  toArray(querySelector(\"[\".concat(attribute, \"=\\\"\").concat(appId, \"\\\"]\"))).map(function (el) {\n    return el.remove();\n  });\n}\nfunction removeAttribute(el, attributeName) {\n  el.removeAttribute(attributeName);\n}\n\nfunction hasMetaInfo(vm) {\n  vm = vm || this;\n  return vm && (vm[rootConfigKey] === true || isObject(vm[rootConfigKey]));\n} // a component is in a metaInfo branch when itself has meta info or one of its (grand-)children has\n\nfunction inMetaInfoBranch(vm) {\n  vm = vm || this;\n  return vm && !isUndefined(vm[rootConfigKey]);\n}\n\nfunction pause(rootVm, refresh) {\n  rootVm[rootConfigKey].pausing = true;\n  return function () {\n    return resume(rootVm, refresh);\n  };\n}\nfunction resume(rootVm, refresh) {\n  rootVm[rootConfigKey].pausing = false;\n\n  if (refresh || refresh === undefined) {\n    return rootVm.$meta().refresh();\n  }\n}\n\nfunction addNavGuards(rootVm) {\n  var router = rootVm.$router; // return when nav guards already added or no router exists\n\n  if (rootVm[rootConfigKey].navGuards || !router) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  rootVm[rootConfigKey].navGuards = true;\n  router.beforeEach(function (to, from, next) {\n    pause(rootVm);\n    next();\n  });\n  router.afterEach(function () {\n    rootVm.$nextTick(function () {\n      var _resume = resume(rootVm),\n          metaInfo = _resume.metaInfo;\n\n      if (metaInfo && isFunction(metaInfo.afterNavigation)) {\n        metaInfo.afterNavigation(metaInfo);\n      }\n    });\n  });\n}\n\nvar appId = 1;\nfunction createMixin(Vue, options) {\n  // for which Vue lifecycle hooks should the metaInfo be refreshed\n  var updateOnLifecycleHook = ['activated', 'deactivated', 'beforeMount'];\n  var wasServerRendered = false; // watch for client side component updates\n\n  return {\n    beforeCreate: function beforeCreate() {\n      var _this2 = this;\n\n      var rootKey = '$root';\n      var $root = this[rootKey];\n      var $options = this.$options;\n      var devtoolsEnabled = Vue.config.devtools;\n      Object.defineProperty(this, '_hasMetaInfo', {\n        configurable: true,\n        get: function get() {\n          // Show deprecation warning once when devtools enabled\n          if (devtoolsEnabled && !$root[rootConfigKey].deprecationWarningShown) {\n            warn('VueMeta DeprecationWarning: _hasMetaInfo has been deprecated and will be removed in a future version. Please use hasMetaInfo(vm) instead');\n            $root[rootConfigKey].deprecationWarningShown = true;\n          }\n\n          return hasMetaInfo(this);\n        }\n      });\n\n      if (this === $root) {\n        $root.$once('hook:beforeMount', function () {\n          wasServerRendered = this.$el && this.$el.nodeType === 1 && this.$el.hasAttribute('data-server-rendered'); // In most cases when you have a SSR app it will be the first app thats gonna be\n          // initiated, if we cant detect the data-server-rendered attribute from Vue but we\n          // do see our own ssrAttribute then _assume_ the Vue app with appId 1 is the ssr app\n          // attempted fix for #404 & #562, but we rly need to refactor how we pass appIds from\n          // ssr to the client\n\n          if (!wasServerRendered && $root[rootConfigKey] && $root[rootConfigKey].appId === 1) {\n            var htmlTag = getTag({}, 'html');\n            wasServerRendered = htmlTag && htmlTag.hasAttribute(options.ssrAttribute);\n          }\n        });\n      } // Add a marker to know if it uses metaInfo\n      // _vnode is used to know that it's attached to a real component\n      // useful if we use some mixin to add some meta tags (like nuxt-i18n)\n\n\n      if (isUndefined($options[options.keyName]) || $options[options.keyName] === null) {\n        return;\n      }\n\n      if (!$root[rootConfigKey]) {\n        $root[rootConfigKey] = {\n          appId: appId\n        };\n        appId++;\n\n        if (devtoolsEnabled && $root.$options[options.keyName]) {\n          // use nextTick so the children should be added to $root\n          this.$nextTick(function () {\n            // find the first child that lists fnOptions\n            var child = find($root.$children, function (c) {\n              return c.$vnode && c.$vnode.fnOptions;\n            });\n\n            if (child && child.$vnode.fnOptions[options.keyName]) {\n              warn(\"VueMeta has detected a possible global mixin which adds a \".concat(options.keyName, \" property to all Vue components on the page. This could cause severe performance issues. If possible, use $meta().addApp to add meta information instead\"));\n            }\n          });\n        }\n      } // to speed up updates we keep track of branches which have a component with vue-meta info defined\n      // if _vueMeta = true it has info, if _vueMeta = false a child has info\n\n\n      if (!this[rootConfigKey]) {\n        this[rootConfigKey] = true;\n        var parent = this.$parent;\n\n        while (parent && parent !== $root) {\n          if (isUndefined(parent[rootConfigKey])) {\n            parent[rootConfigKey] = false;\n          }\n\n          parent = parent.$parent;\n        }\n      } // coerce function-style metaInfo to a computed prop so we can observe\n      // it on creation\n\n\n      if (isFunction($options[options.keyName])) {\n        $options.computed = $options.computed || {};\n        $options.computed.$metaInfo = $options[options.keyName];\n\n        if (!this.$isServer) {\n          // if computed $metaInfo exists, watch it for updates & trigger a refresh\n          // when it changes (i.e. automatically handle async actions that affect metaInfo)\n          // credit for this suggestion goes to [Sébastien Chopin](https://github.com/Atinux)\n          this.$on('hook:created', function () {\n            this.$watch('$metaInfo', function () {\n              triggerUpdate(options, this[rootKey], 'watcher');\n            });\n          });\n        }\n      } // force an initial refresh on page load and prevent other lifecycleHooks\n      // to triggerUpdate until this initial refresh is finished\n      // this is to make sure that when a page is opened in an inactive tab which\n      // has throttled rAF/timers we still immediately set the page title\n\n\n      if (isUndefined($root[rootConfigKey].initialized)) {\n        $root[rootConfigKey].initialized = this.$isServer;\n\n        if (!$root[rootConfigKey].initialized) {\n          if (!$root[rootConfigKey].initializedSsr) {\n            $root[rootConfigKey].initializedSsr = true;\n            this.$on('hook:beforeMount', function () {\n              var $root = this[rootKey]; // if this Vue-app was server rendered, set the appId to 'ssr'\n              // only one SSR app per page is supported\n\n              if (wasServerRendered) {\n                $root[rootConfigKey].appId = options.ssrAppId;\n              }\n            });\n          } // we use the mounted hook here as on page load\n\n\n          this.$on('hook:mounted', function () {\n            var $root = this[rootKey];\n\n            if ($root[rootConfigKey].initialized) {\n              return;\n            } // used in triggerUpdate to check if a change was triggered\n            // during initialization\n\n\n            $root[rootConfigKey].initializing = true; // refresh meta in nextTick so all child components have loaded\n\n            this.$nextTick(function () {\n              var _$root$$meta$refresh = $root.$meta().refresh(),\n                  tags = _$root$$meta$refresh.tags,\n                  metaInfo = _$root$$meta$refresh.metaInfo; // After ssr hydration (identifier by tags === false) check\n              // if initialized was set to null in triggerUpdate. That'd mean\n              // that during initilazation changes where triggered which need\n              // to be applied OR a metaInfo watcher was triggered before the\n              // current hook was called\n              // (during initialization all changes are blocked)\n\n\n              if (tags === false && $root[rootConfigKey].initialized === null) {\n                this.$nextTick(function () {\n                  return triggerUpdate(options, $root, 'init');\n                });\n              }\n\n              $root[rootConfigKey].initialized = true;\n              delete $root[rootConfigKey].initializing; // add the navigation guards if they havent been added yet\n              // they are needed for the afterNavigation callback\n\n              if (!options.refreshOnceOnNavigation && metaInfo.afterNavigation) {\n                addNavGuards($root);\n              }\n            });\n          }); // add the navigation guards if requested\n\n          if (options.refreshOnceOnNavigation) {\n            addNavGuards($root);\n          }\n        }\n      }\n\n      this.$on('hook:destroyed', function () {\n        var _this = this;\n\n        // do not trigger refresh:\n        // - when user configured to not wait for transitions on destroyed\n        // - when the component doesnt have a parent\n        // - doesnt have metaInfo defined\n        if (!this.$parent || !hasMetaInfo(this)) {\n          return;\n        }\n\n        delete this._hasMetaInfo;\n        this.$nextTick(function () {\n          if (!options.waitOnDestroyed || !_this.$el || !_this.$el.offsetParent) {\n            triggerUpdate(options, _this.$root, 'destroyed');\n            return;\n          } // Wait that element is hidden before refreshing meta tags (to support animations)\n\n\n          var interval = setInterval(function () {\n            if (_this.$el && _this.$el.offsetParent !== null) {\n              /* istanbul ignore next line */\n              return;\n            }\n\n            clearInterval(interval);\n            triggerUpdate(options, _this.$root, 'destroyed');\n          }, 50);\n        });\n      }); // do not trigger refresh on the server side\n\n      if (this.$isServer) {\n        /* istanbul ignore next */\n        return;\n      } // no need to add this hooks on server side\n\n\n      updateOnLifecycleHook.forEach(function (lifecycleHook) {\n        _this2.$on(\"hook:\".concat(lifecycleHook), function () {\n          triggerUpdate(options, this[rootKey], lifecycleHook);\n        });\n      });\n    }\n  };\n}\n\nfunction setOptions(options) {\n  // combine options\n  options = isObject(options) ? options : {}; // The options are set like this so they can\n  // be minified by terser while keeping the\n  // user api intact\n  // terser --mangle-properties keep_quoted=strict\n\n  /* eslint-disable dot-notation */\n\n  return {\n    keyName: options['keyName'] || defaultOptions.keyName,\n    attribute: options['attribute'] || defaultOptions.attribute,\n    ssrAttribute: options['ssrAttribute'] || defaultOptions.ssrAttribute,\n    tagIDKeyName: options['tagIDKeyName'] || defaultOptions.tagIDKeyName,\n    contentKeyName: options['contentKeyName'] || defaultOptions.contentKeyName,\n    metaTemplateKeyName: options['metaTemplateKeyName'] || defaultOptions.metaTemplateKeyName,\n    debounceWait: isUndefined(options['debounceWait']) ? defaultOptions.debounceWait : options['debounceWait'],\n    waitOnDestroyed: isUndefined(options['waitOnDestroyed']) ? defaultOptions.waitOnDestroyed : options['waitOnDestroyed'],\n    ssrAppId: options['ssrAppId'] || defaultOptions.ssrAppId,\n    refreshOnceOnNavigation: !!options['refreshOnceOnNavigation']\n  };\n  /* eslint-enable dot-notation */\n}\nfunction getOptions(options) {\n  var optionsCopy = {};\n\n  for (var key in options) {\n    optionsCopy[key] = options[key];\n  }\n\n  return optionsCopy;\n}\n\nfunction ensureIsArray(arg, key) {\n  if (!key || !isObject(arg)) {\n    return isArray(arg) ? arg : [];\n  }\n\n  if (!isArray(arg[key])) {\n    arg[key] = [];\n  }\n\n  return arg;\n}\n\nvar serverSequences = [[/&/g, '&amp;'], [/</g, '&lt;'], [/>/g, '&gt;'], [/\"/g, '&quot;'], [/'/g, '&#x27;']];\nvar clientSequences = [[/&/g, \"&\"], [/</g, \"<\"], [/>/g, \">\"], [/\"/g, \"\\\"\"], [/'/g, \"'\"]]; // sanitizes potentially dangerous characters\n\nfunction escape(info, options, escapeOptions, escapeKeys) {\n  var tagIDKeyName = options.tagIDKeyName;\n  var _escapeOptions$doEsca = escapeOptions.doEscape,\n      doEscape = _escapeOptions$doEsca === void 0 ? function (v) {\n    return v;\n  } : _escapeOptions$doEsca;\n  var escaped = {};\n\n  for (var key in info) {\n    var value = info[key]; // no need to escape configuration options\n\n    if (includes(metaInfoOptionKeys, key)) {\n      escaped[key] = value;\n      continue;\n    } // do not use destructuring for disableOptionKeys, it increases transpiled size\n    // due to var checks while we are guaranteed the structure of the cb\n\n\n    var disableKey = disableOptionKeys[0];\n\n    if (escapeOptions[disableKey] && includes(escapeOptions[disableKey], key)) {\n      // this info[key] doesnt need to escaped if the option is listed in __dangerouslyDisableSanitizers\n      escaped[key] = value;\n      continue;\n    }\n\n    var tagId = info[tagIDKeyName];\n\n    if (tagId) {\n      disableKey = disableOptionKeys[1]; // keys which are listed in __dangerouslyDisableSanitizersByTagID for the current vmid do not need to be escaped\n\n      if (escapeOptions[disableKey] && escapeOptions[disableKey][tagId] && includes(escapeOptions[disableKey][tagId], key)) {\n        escaped[key] = value;\n        continue;\n      }\n    }\n\n    if (isString(value)) {\n      escaped[key] = doEscape(value);\n    } else if (isArray(value)) {\n      escaped[key] = value.map(function (v) {\n        if (isPureObject(v)) {\n          return escape(v, options, escapeOptions, true);\n        }\n\n        return doEscape(v);\n      });\n    } else if (isPureObject(value)) {\n      escaped[key] = escape(value, options, escapeOptions, true);\n    } else {\n      escaped[key] = value;\n    }\n\n    if (escapeKeys) {\n      var escapedKey = doEscape(key);\n\n      if (key !== escapedKey) {\n        escaped[escapedKey] = escaped[key];\n        delete escaped[key];\n      }\n    }\n  }\n\n  return escaped;\n}\nfunction escapeMetaInfo(options, info, escapeSequences) {\n  escapeSequences = escapeSequences || []; // do not use destructuring for seq, it increases transpiled size\n  // due to var checks while we are guaranteed the structure of the cb\n\n  var escapeOptions = {\n    doEscape: function doEscape(value) {\n      return escapeSequences.reduce(function (val, seq) {\n        return val.replace(seq[0], seq[1]);\n      }, value);\n    }\n  };\n  disableOptionKeys.forEach(function (disableKey, index) {\n    if (index === 0) {\n      ensureIsArray(info, disableKey);\n    } else if (index === 1) {\n      for (var key in info[disableKey]) {\n        ensureIsArray(info[disableKey], key);\n      }\n    }\n\n    escapeOptions[disableKey] = info[disableKey];\n  }); // begin sanitization\n\n  return escape(info, options, escapeOptions);\n}\n\nfunction applyTemplate(_ref, headObject, template, chunk) {\n  var component = _ref.component,\n      metaTemplateKeyName = _ref.metaTemplateKeyName,\n      contentKeyName = _ref.contentKeyName;\n\n  if (template === true || headObject[metaTemplateKeyName] === true) {\n    // abort, template was already applied\n    return false;\n  }\n\n  if (isUndefined(template) && headObject[metaTemplateKeyName]) {\n    template = headObject[metaTemplateKeyName];\n    headObject[metaTemplateKeyName] = true;\n  } // return early if no template defined\n\n\n  if (!template) {\n    // cleanup faulty template properties\n    delete headObject[metaTemplateKeyName];\n    return false;\n  }\n\n  if (isUndefined(chunk)) {\n    chunk = headObject[contentKeyName];\n  }\n\n  headObject[contentKeyName] = isFunction(template) ? template.call(component, chunk) : template.replace(/%s/g, chunk);\n  return true;\n}\n\nfunction _arrayMerge(_ref, target, source) {\n  var component = _ref.component,\n      tagIDKeyName = _ref.tagIDKeyName,\n      metaTemplateKeyName = _ref.metaTemplateKeyName,\n      contentKeyName = _ref.contentKeyName;\n  // we concat the arrays without merging objects contained in,\n  // but we check for a `vmid` property on each object in the array\n  // using an O(1) lookup associative array exploit\n  var destination = [];\n\n  if (!target.length && !source.length) {\n    return destination;\n  }\n\n  target.forEach(function (targetItem, targetIndex) {\n    // no tagID so no need to check for duplicity\n    if (!targetItem[tagIDKeyName]) {\n      destination.push(targetItem);\n      return;\n    }\n\n    var sourceIndex = findIndex(source, function (item) {\n      return item[tagIDKeyName] === targetItem[tagIDKeyName];\n    });\n    var sourceItem = source[sourceIndex]; // source doesnt contain any duplicate vmid's, we can keep targetItem\n\n    if (sourceIndex === -1) {\n      destination.push(targetItem);\n      return;\n    } // when sourceItem explictly defines contentKeyName or innerHTML as undefined, its\n    // an indication that we need to skip the default behaviour or child has preference over parent\n    // which means we keep the targetItem and ignore/remove the sourceItem\n\n\n    if (contentKeyName in sourceItem && sourceItem[contentKeyName] === undefined || 'innerHTML' in sourceItem && sourceItem.innerHTML === undefined) {\n      destination.push(targetItem); // remove current index from source array so its not concatenated to destination below\n\n      source.splice(sourceIndex, 1);\n      return;\n    } // we now know that targetItem is a duplicate and we should ignore it in favor of sourceItem\n    // if source specifies null as content then ignore both the target as the source\n\n\n    if (sourceItem[contentKeyName] === null || sourceItem.innerHTML === null) {\n      // remove current index from source array so its not concatenated to destination below\n      source.splice(sourceIndex, 1);\n      return;\n    } // now we only need to check if the target has a template to combine it with the source\n\n\n    var targetTemplate = targetItem[metaTemplateKeyName];\n\n    if (!targetTemplate) {\n      return;\n    }\n\n    var sourceTemplate = sourceItem[metaTemplateKeyName];\n\n    if (!sourceTemplate) {\n      // use parent template and child content\n      applyTemplate({\n        component: component,\n        metaTemplateKeyName: metaTemplateKeyName,\n        contentKeyName: contentKeyName\n      }, sourceItem, targetTemplate); // set template to true to indicate template was already applied\n\n      sourceItem.template = true;\n      return;\n    }\n\n    if (!sourceItem[contentKeyName]) {\n      // use parent content and child template\n      applyTemplate({\n        component: component,\n        metaTemplateKeyName: metaTemplateKeyName,\n        contentKeyName: contentKeyName\n      }, sourceItem, undefined, targetItem[contentKeyName]);\n    }\n  });\n  return destination.concat(source);\n}\nvar warningShown = false;\nfunction merge(target, source, options) {\n  options = options || {}; // remove properties explicitly set to false so child components can\n  // optionally _not_ overwrite the parents content\n  // (for array properties this is checked in arrayMerge)\n\n  if (source.title === undefined) {\n    delete source.title;\n  }\n\n  metaInfoAttributeKeys.forEach(function (attrKey) {\n    if (!source[attrKey]) {\n      return;\n    }\n\n    for (var key in source[attrKey]) {\n      if (key in source[attrKey] && source[attrKey][key] === undefined) {\n        if (includes(booleanHtmlAttributes, key) && !warningShown) {\n          warn('VueMeta: Please note that since v2 the value undefined is not used to indicate boolean attributes anymore, see migration guide for details');\n          warningShown = true;\n        }\n\n        delete source[attrKey][key];\n      }\n    }\n  });\n  return deepmerge(target, source, {\n    arrayMerge: function arrayMerge(t, s) {\n      return _arrayMerge(options, t, s);\n    }\n  });\n}\n\nfunction getComponentMetaInfo(options, component) {\n  return getComponentOption(options || {}, component, defaultInfo);\n}\n/**\n * Returns the `opts.option` $option value of the given `opts.component`.\n * If methods are encountered, they will be bound to the component context.\n * If `opts.deep` is true, will recursively merge all child component\n * `opts.option` $option values into the returned result.\n *\n * @param  {Object} opts - options\n * @param  {Object} opts.component - Vue component to fetch option data from\n * @param  {Boolean} opts.deep - look for data in child components as well?\n * @param  {Function} opts.arrayMerge - how should arrays be merged?\n * @param  {String} opts.keyName - the name of the option to look for\n * @param  {Object} [result={}] - result so far\n * @return {Object} result - final aggregated result\n */\n\nfunction getComponentOption(options, component, result) {\n  result = result || {};\n\n  if (component._inactive) {\n    return result;\n  }\n\n  options = options || {};\n  var _options = options,\n      keyName = _options.keyName;\n  var $metaInfo = component.$metaInfo,\n      $options = component.$options,\n      $children = component.$children; // only collect option data if it exists\n\n  if ($options[keyName]) {\n    // if $metaInfo exists then [keyName] was defined as a function\n    // and set to the computed prop $metaInfo in the mixin\n    // using the computed prop should be a small performance increase\n    // because Vue caches those internally\n    var data = $metaInfo || $options[keyName]; // only merge data with result when its an object\n    // eg it could be a function when metaInfo() returns undefined\n    // dueo to the or statement above\n\n    if (isObject(data)) {\n      result = merge(result, data, options);\n    }\n  } // collect & aggregate child options if deep = true\n\n\n  if ($children.length) {\n    $children.forEach(function (childComponent) {\n      // check if the childComponent is in a branch\n      // return otherwise so we dont walk all component branches unnecessarily\n      if (!inMetaInfoBranch(childComponent)) {\n        return;\n      }\n\n      result = getComponentOption(options, childComponent, result);\n    });\n  }\n\n  return result;\n}\n\nvar callbacks = [];\nfunction isDOMComplete(d) {\n  return (d || document).readyState === 'complete';\n}\nfunction addCallback(query, callback) {\n  if (arguments.length === 1) {\n    callback = query;\n    query = '';\n  }\n\n  callbacks.push([query, callback]);\n}\nfunction addCallbacks(_ref, type, tags, autoAddListeners) {\n  var tagIDKeyName = _ref.tagIDKeyName;\n  var hasAsyncCallback = false;\n  tags.forEach(function (tag) {\n    if (!tag[tagIDKeyName] || !tag.callback) {\n      return;\n    }\n\n    hasAsyncCallback = true;\n    addCallback(\"\".concat(type, \"[data-\").concat(tagIDKeyName, \"=\\\"\").concat(tag[tagIDKeyName], \"\\\"]\"), tag.callback);\n  });\n\n  if (!autoAddListeners || !hasAsyncCallback) {\n    return hasAsyncCallback;\n  }\n\n  return addListeners();\n}\nfunction addListeners() {\n  if (isDOMComplete()) {\n    applyCallbacks();\n    return;\n  } // Instead of using a MutationObserver, we just apply\n\n  /* istanbul ignore next */\n\n\n  document.onreadystatechange = function () {\n    applyCallbacks();\n  };\n}\nfunction applyCallbacks(matchElement) {\n  callbacks.forEach(function (args) {\n    // do not use destructuring for args, it increases transpiled size\n    // due to var checks while we are guaranteed the structure of the cb\n    var query = args[0];\n    var callback = args[1];\n    var selector = \"\".concat(query, \"[onload=\\\"this.__vm_l=1\\\"]\");\n    var elements = [];\n\n    if (!matchElement) {\n      elements = toArray(querySelector(selector));\n    }\n\n    if (matchElement && matchElement.matches(selector)) {\n      elements = [matchElement];\n    }\n\n    elements.forEach(function (element) {\n      /* __vm_cb: whether the load callback has been called\n       * __vm_l: set by onload attribute, whether the element was loaded\n       * __vm_ev: whether the event listener was added or not\n       */\n      if (element.__vm_cb) {\n        return;\n      }\n\n      var onload = function onload() {\n        /* Mark that the callback for this element has already been called,\n         * this prevents the callback to run twice in some (rare) conditions\n         */\n        element.__vm_cb = true;\n        /* onload needs to be removed because we only need the\n         * attribute after ssr and if we dont remove it the node\n         * will fail isEqualNode on the client\n         */\n\n        removeAttribute(element, 'onload');\n        callback(element);\n      };\n      /* IE9 doesnt seem to load scripts synchronously,\n       * causing a script sometimes/often already to be loaded\n       * when we add the event listener below (thus adding an onload event\n       * listener has no use because it will never be triggered).\n       * Therefore we add the onload attribute during ssr, and\n       * check here if it was already loaded or not\n       */\n\n\n      if (element.__vm_l) {\n        onload();\n        return;\n      }\n\n      if (!element.__vm_ev) {\n        element.__vm_ev = true;\n        element.addEventListener('load', onload);\n      }\n    });\n  });\n}\n\n// instead of adding it to the html\n\nvar attributeMap = {};\n/**\n * Updates the document's html tag attributes\n *\n * @param  {Object} attrs - the new document html attributes\n * @param  {HTMLElement} tag - the HTMLElement tag to update with new attrs\n */\n\nfunction updateAttribute(appId, options, type, attrs, tag) {\n  var _ref = options || {},\n      attribute = _ref.attribute;\n\n  var vueMetaAttrString = tag.getAttribute(attribute);\n\n  if (vueMetaAttrString) {\n    attributeMap[type] = JSON.parse(decodeURI(vueMetaAttrString));\n    removeAttribute(tag, attribute);\n  }\n\n  var data = attributeMap[type] || {};\n  var toUpdate = []; // remove attributes from the map\n  // which have been removed for this appId\n\n  for (var attr in data) {\n    if (data[attr] !== undefined && appId in data[attr]) {\n      toUpdate.push(attr);\n\n      if (!attrs[attr]) {\n        delete data[attr][appId];\n      }\n    }\n  }\n\n  for (var _attr in attrs) {\n    var attrData = data[_attr];\n\n    if (!attrData || attrData[appId] !== attrs[_attr]) {\n      toUpdate.push(_attr);\n\n      if (attrs[_attr] !== undefined) {\n        data[_attr] = data[_attr] || {};\n        data[_attr][appId] = attrs[_attr];\n      }\n    }\n  }\n\n  for (var _i = 0, _toUpdate = toUpdate; _i < _toUpdate.length; _i++) {\n    var _attr2 = _toUpdate[_i];\n    var _attrData = data[_attr2];\n    var attrValues = [];\n\n    for (var _appId in _attrData) {\n      Array.prototype.push.apply(attrValues, [].concat(_attrData[_appId]));\n    }\n\n    if (attrValues.length) {\n      var attrValue = includes(booleanHtmlAttributes, _attr2) && attrValues.some(Boolean) ? '' : attrValues.filter(function (v) {\n        return v !== undefined;\n      }).join(' ');\n      tag.setAttribute(_attr2, attrValue);\n    } else {\n      removeAttribute(tag, _attr2);\n    }\n  }\n\n  attributeMap[type] = data;\n}\n\n/**\n * Updates the document title\n *\n * @param  {String} title - the new title of the document\n */\nfunction updateTitle(title) {\n  if (!title && title !== '') {\n    return;\n  }\n\n  document.title = title;\n}\n\n/**\n * Updates meta tags inside <head> and <body> on the client. Borrowed from `react-helmet`:\n * https://github.com/nfl/react-helmet/blob/004d448f8de5f823d10f838b02317521180f34da/src/Helmet.js#L195-L245\n *\n * @param  {('meta'|'base'|'link'|'style'|'script'|'noscript')} type - the name of the tag\n * @param  {(Array<Object>|Object)} tags - an array of tag objects or a single object in case of base\n * @return {Object} - a representation of what tags changed\n */\n\nfunction updateTag(appId, options, type, tags, head, body) {\n  var _ref = options || {},\n      attribute = _ref.attribute,\n      tagIDKeyName = _ref.tagIDKeyName;\n\n  var dataAttributes = commonDataAttributes.slice();\n  dataAttributes.push(tagIDKeyName);\n  var newElements = [];\n  var queryOptions = {\n    appId: appId,\n    attribute: attribute,\n    type: type,\n    tagIDKeyName: tagIDKeyName\n  };\n  var currentElements = {\n    head: queryElements(head, queryOptions),\n    pbody: queryElements(body, queryOptions, {\n      pbody: true\n    }),\n    body: queryElements(body, queryOptions, {\n      body: true\n    })\n  };\n\n  if (tags.length > 1) {\n    // remove duplicates that could have been found by merging tags\n    // which include a mixin with metaInfo and that mixin is used\n    // by multiple components on the same page\n    var found = [];\n    tags = tags.filter(function (x) {\n      var k = JSON.stringify(x);\n      var res = !includes(found, k);\n      found.push(k);\n      return res;\n    });\n  }\n\n  tags.forEach(function (tag) {\n    if (tag.skip) {\n      return;\n    }\n\n    var newElement = document.createElement(type);\n\n    if (!tag.once) {\n      newElement.setAttribute(attribute, appId);\n    }\n\n    Object.keys(tag).forEach(function (attr) {\n      /* istanbul ignore next */\n      if (includes(tagProperties, attr)) {\n        return;\n      }\n\n      if (attr === 'innerHTML') {\n        newElement.innerHTML = tag.innerHTML;\n        return;\n      }\n\n      if (attr === 'json') {\n        newElement.innerHTML = JSON.stringify(tag.json);\n        return;\n      }\n\n      if (attr === 'cssText') {\n        if (newElement.styleSheet) {\n          /* istanbul ignore next */\n          newElement.styleSheet.cssText = tag.cssText;\n        } else {\n          newElement.appendChild(document.createTextNode(tag.cssText));\n        }\n\n        return;\n      }\n\n      if (attr === 'callback') {\n        newElement.onload = function () {\n          return tag[attr](newElement);\n        };\n\n        return;\n      }\n\n      var _attr = includes(dataAttributes, attr) ? \"data-\".concat(attr) : attr;\n\n      var isBooleanAttribute = includes(booleanHtmlAttributes, attr);\n\n      if (isBooleanAttribute && !tag[attr]) {\n        return;\n      }\n\n      var value = isBooleanAttribute ? '' : tag[attr];\n      newElement.setAttribute(_attr, value);\n    });\n    var oldElements = currentElements[getElementsKey(tag)]; // Remove a duplicate tag from domTagstoRemove, so it isn't cleared.\n\n    var indexToDelete;\n    var hasEqualElement = oldElements.some(function (existingTag, index) {\n      indexToDelete = index;\n      return newElement.isEqualNode(existingTag);\n    });\n\n    if (hasEqualElement && (indexToDelete || indexToDelete === 0)) {\n      oldElements.splice(indexToDelete, 1);\n    } else {\n      newElements.push(newElement);\n    }\n  });\n  var oldElements = [];\n\n  for (var _type in currentElements) {\n    Array.prototype.push.apply(oldElements, currentElements[_type]);\n  } // remove old elements\n\n\n  oldElements.forEach(function (element) {\n    element.parentNode.removeChild(element);\n  }); // insert new elements\n\n  newElements.forEach(function (element) {\n    if (element.hasAttribute('data-body')) {\n      body.appendChild(element);\n      return;\n    }\n\n    if (element.hasAttribute('data-pbody')) {\n      body.insertBefore(element, body.firstChild);\n      return;\n    }\n\n    head.appendChild(element);\n  });\n  return {\n    oldTags: oldElements,\n    newTags: newElements\n  };\n}\n\n/**\n * Performs client-side updates when new meta info is received\n *\n * @param  {Object} newInfo - the meta info to update to\n */\n\nfunction updateClientMetaInfo(appId, options, newInfo) {\n  options = options || {};\n  var _options = options,\n      ssrAttribute = _options.ssrAttribute,\n      ssrAppId = _options.ssrAppId; // only cache tags for current update\n\n  var tags = {};\n  var htmlTag = getTag(tags, 'html'); // if this is a server render, then dont update\n\n  if (appId === ssrAppId && htmlTag.hasAttribute(ssrAttribute)) {\n    // remove the server render attribute so we can update on (next) changes\n    removeAttribute(htmlTag, ssrAttribute); // add load callbacks if the\n\n    var addLoadListeners = false;\n    tagsSupportingOnload.forEach(function (type) {\n      if (newInfo[type] && addCallbacks(options, type, newInfo[type])) {\n        addLoadListeners = true;\n      }\n    });\n\n    if (addLoadListeners) {\n      addListeners();\n    }\n\n    return false;\n  } // initialize tracked changes\n\n\n  var tagsAdded = {};\n  var tagsRemoved = {};\n\n  for (var type in newInfo) {\n    // ignore these\n    if (includes(metaInfoOptionKeys, type)) {\n      continue;\n    }\n\n    if (type === 'title') {\n      // update the title\n      updateTitle(newInfo.title);\n      continue;\n    }\n\n    if (includes(metaInfoAttributeKeys, type)) {\n      var tagName = type.substr(0, 4);\n      updateAttribute(appId, options, type, newInfo[type], getTag(tags, tagName));\n      continue;\n    } // tags should always be an array, ignore if it isnt\n\n\n    if (!isArray(newInfo[type])) {\n      continue;\n    }\n\n    var _updateTag = updateTag(appId, options, type, newInfo[type], getTag(tags, 'head'), getTag(tags, 'body')),\n        oldTags = _updateTag.oldTags,\n        newTags = _updateTag.newTags;\n\n    if (newTags.length) {\n      tagsAdded[type] = newTags;\n      tagsRemoved[type] = oldTags;\n    }\n  }\n\n  return {\n    tagsAdded: tagsAdded,\n    tagsRemoved: tagsRemoved\n  };\n}\n\nvar appsMetaInfo;\nfunction addApp(rootVm, appId, options) {\n  return {\n    set: function set(metaInfo) {\n      return setMetaInfo(rootVm, appId, options, metaInfo);\n    },\n    remove: function remove() {\n      return removeMetaInfo(rootVm, appId, options);\n    }\n  };\n}\nfunction setMetaInfo(rootVm, appId, options, metaInfo) {\n  // if a vm exists _and_ its mounted then immediately update\n  if (rootVm && rootVm.$el) {\n    return updateClientMetaInfo(appId, options, metaInfo);\n  } // store for later, the info\n  // will be set on the first refresh\n\n\n  appsMetaInfo = appsMetaInfo || {};\n  appsMetaInfo[appId] = metaInfo;\n}\nfunction removeMetaInfo(rootVm, appId, options) {\n  if (rootVm && rootVm.$el) {\n    var tags = {};\n\n    var _iterator = _createForOfIteratorHelper(metaInfoAttributeKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type = _step.value;\n        var tagName = type.substr(0, 4);\n        updateAttribute(appId, options, type, {}, getTag(tags, tagName));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return removeElementsByAppId(options, appId);\n  }\n\n  if (appsMetaInfo[appId]) {\n    delete appsMetaInfo[appId];\n    clearAppsMetaInfo();\n  }\n}\nfunction getAppsMetaInfo() {\n  return appsMetaInfo;\n}\nfunction clearAppsMetaInfo(force) {\n  if (force || !Object.keys(appsMetaInfo).length) {\n    appsMetaInfo = undefined;\n  }\n}\n\n/**\n * Returns the correct meta info for the given component\n * (child components will overwrite parent meta info)\n *\n * @param  {Object} component - the Vue instance to get meta info from\n * @return {Object} - returned meta info\n */\n\nfunction getMetaInfo(options, info, escapeSequences, component) {\n  options = options || {};\n  escapeSequences = escapeSequences || [];\n  var _options = options,\n      tagIDKeyName = _options.tagIDKeyName; // Remove all \"template\" tags from meta\n  // backup the title chunk in case user wants access to it\n\n  if (info.title) {\n    info.titleChunk = info.title;\n  } // replace title with populated template\n\n\n  if (info.titleTemplate && info.titleTemplate !== '%s') {\n    applyTemplate({\n      component: component,\n      contentKeyName: 'title'\n    }, info, info.titleTemplate, info.titleChunk || '');\n  } // convert base tag to an array so it can be handled the same way\n  // as the other tags\n\n\n  if (info.base) {\n    info.base = Object.keys(info.base).length ? [info.base] : [];\n  }\n\n  if (info.meta) {\n    // remove meta items with duplicate vmid's\n    info.meta = info.meta.filter(function (metaItem, index, arr) {\n      var hasVmid = !!metaItem[tagIDKeyName];\n\n      if (!hasVmid) {\n        return true;\n      }\n\n      var isFirstItemForVmid = index === findIndex(arr, function (item) {\n        return item[tagIDKeyName] === metaItem[tagIDKeyName];\n      });\n      return isFirstItemForVmid;\n    }); // apply templates if needed\n\n    info.meta.forEach(function (metaObject) {\n      return applyTemplate(options, metaObject);\n    });\n  }\n\n  return escapeMetaInfo(options, info, escapeSequences);\n}\n\n/**\n * When called, will update the current meta info with new meta info.\n * Useful when updating meta info as the result of an asynchronous\n * action that resolves after the initial render takes place.\n *\n * Credit to [Sébastien Chopin](https://github.com/Atinux) for the suggestion\n * to implement this method.\n *\n * @return {Object} - new meta info\n */\n\nfunction refresh(rootVm, options) {\n  options = options || {}; // make sure vue-meta was initiated\n\n  if (!rootVm[rootConfigKey]) {\n    showWarningNotSupported();\n    return {};\n  } // collect & aggregate all metaInfo $options\n\n\n  var rawInfo = getComponentMetaInfo(options, rootVm);\n  var metaInfo = getMetaInfo(options, rawInfo, clientSequences, rootVm);\n  var appId = rootVm[rootConfigKey].appId;\n  var tags = updateClientMetaInfo(appId, options, metaInfo); // emit \"event\" with new info\n\n  if (tags && isFunction(metaInfo.changed)) {\n    metaInfo.changed(metaInfo, tags.tagsAdded, tags.tagsRemoved);\n    tags = {\n      addedTags: tags.tagsAdded,\n      removedTags: tags.tagsRemoved\n    };\n  }\n\n  var appsMetaInfo = getAppsMetaInfo();\n\n  if (appsMetaInfo) {\n    for (var additionalAppId in appsMetaInfo) {\n      updateClientMetaInfo(additionalAppId, options, appsMetaInfo[additionalAppId]);\n      delete appsMetaInfo[additionalAppId];\n    }\n\n    clearAppsMetaInfo(true);\n  }\n\n  return {\n    vm: rootVm,\n    metaInfo: metaInfo,\n    // eslint-disable-line object-shorthand\n    tags: tags\n  };\n}\n\n/**\n * Generates tag attributes for use on the server.\n *\n * @param  {('bodyAttrs'|'htmlAttrs'|'headAttrs')} type - the type of attributes to generate\n * @param  {Object} data - the attributes to generate\n * @return {Object} - the attribute generator\n */\n\nfunction attributeGenerator(options, type, data, _ref) {\n  var addSsrAttribute = _ref.addSsrAttribute;\n\n  var _ref2 = options || {},\n      attribute = _ref2.attribute,\n      ssrAttribute = _ref2.ssrAttribute;\n\n  var attributeStr = '';\n\n  for (var attr in data) {\n    var attrData = data[attr];\n    var attrValues = [];\n\n    for (var appId in attrData) {\n      attrValues.push.apply(attrValues, _toConsumableArray([].concat(attrData[appId])));\n    }\n\n    if (attrValues.length) {\n      attributeStr += booleanHtmlAttributes.includes(attr) && attrValues.some(Boolean) ? \"\".concat(attr) : \"\".concat(attr, \"=\\\"\").concat(attrValues.join(' '), \"\\\"\");\n      attributeStr += ' ';\n    }\n  }\n\n  if (attributeStr) {\n    attributeStr += \"\".concat(attribute, \"=\\\"\").concat(encodeURI(JSON.stringify(data)), \"\\\"\");\n  }\n\n  if (type === 'htmlAttrs' && addSsrAttribute) {\n    return \"\".concat(ssrAttribute).concat(attributeStr ? ' ' : '').concat(attributeStr);\n  }\n\n  return attributeStr;\n}\n\n/**\n * Generates title output for the server\n *\n * @param  {'title'} type - the string \"title\"\n * @param  {String} data - the title text\n * @return {Object} - the title generator\n */\nfunction titleGenerator(options, type, data, generatorOptions) {\n  var _ref = generatorOptions || {},\n      ln = _ref.ln;\n\n  if (!data) {\n    return '';\n  }\n\n  return \"<\".concat(type, \">\").concat(data, \"</\").concat(type, \">\").concat(ln ? '\\n' : '');\n}\n\n/**\n * Generates meta, base, link, style, script, noscript tags for use on the server\n *\n * @param  {('meta'|'base'|'link'|'style'|'script'|'noscript')} the name of the tag\n * @param  {(Array<Object>|Object)} tags - an array of tag objects or a single object in case of base\n * @return {Object} - the tag generator\n */\n\nfunction tagGenerator(options, type, tags, generatorOptions) {\n  var _ref = options || {},\n      ssrAppId = _ref.ssrAppId,\n      attribute = _ref.attribute,\n      tagIDKeyName = _ref.tagIDKeyName;\n\n  var _ref2 = generatorOptions || {},\n      appId = _ref2.appId,\n      _ref2$isSSR = _ref2.isSSR,\n      isSSR = _ref2$isSSR === void 0 ? true : _ref2$isSSR,\n      _ref2$body = _ref2.body,\n      body = _ref2$body === void 0 ? false : _ref2$body,\n      _ref2$pbody = _ref2.pbody,\n      pbody = _ref2$pbody === void 0 ? false : _ref2$pbody,\n      _ref2$ln = _ref2.ln,\n      ln = _ref2$ln === void 0 ? false : _ref2$ln;\n\n  var dataAttributes = [tagIDKeyName].concat(_toConsumableArray(commonDataAttributes));\n\n  if (!tags || !tags.length) {\n    return '';\n  } // build a string containing all tags of this type\n\n\n  return tags.reduce(function (tagsStr, tag) {\n    if (tag.skip) {\n      return tagsStr;\n    }\n\n    var tagKeys = Object.keys(tag);\n\n    if (tagKeys.length === 0) {\n      return tagsStr; // Bail on empty tag object\n    }\n\n    if (Boolean(tag.body) !== body || Boolean(tag.pbody) !== pbody) {\n      return tagsStr;\n    }\n\n    var attrs = tag.once ? '' : \" \".concat(attribute, \"=\\\"\").concat(appId || (isSSR === false ? '1' : ssrAppId), \"\\\"\"); // build a string containing all attributes of this tag\n\n    for (var attr in tag) {\n      // these attributes are treated as children on the tag\n      if (tagAttributeAsInnerContent.includes(attr) || tagProperties.includes(attr)) {\n        continue;\n      }\n\n      if (attr === 'callback') {\n        attrs += ' onload=\"this.__vm_l=1\"';\n        continue;\n      } // these form the attribute list for this tag\n\n\n      var prefix = '';\n\n      if (dataAttributes.includes(attr)) {\n        prefix = 'data-';\n      }\n\n      var isBooleanAttr = !prefix && booleanHtmlAttributes.includes(attr);\n\n      if (isBooleanAttr && !tag[attr]) {\n        continue;\n      }\n\n      attrs += \" \".concat(prefix).concat(attr) + (isBooleanAttr ? '' : \"=\\\"\".concat(tag[attr], \"\\\"\"));\n    }\n\n    var json = '';\n\n    if (tag.json) {\n      json = JSON.stringify(tag.json);\n    } // grab child content from one of these attributes, if possible\n\n\n    var content = tag.innerHTML || tag.cssText || json; // generate tag exactly without any other redundant attribute\n    // these tags have no end tag\n\n    var hasEndTag = !tagsWithoutEndTag.includes(type); // these tag types will have content inserted\n\n    var hasContent = hasEndTag && tagsWithInnerContent.includes(type); // the final string for this specific tag\n\n    return \"\".concat(tagsStr, \"<\").concat(type).concat(attrs).concat(!hasContent && hasEndTag ? '/' : '', \">\") + (hasContent ? \"\".concat(content, \"</\").concat(type, \">\") : '') + (ln ? '\\n' : '');\n  }, '');\n}\n\n/**\n * Converts a meta info property to one that can be stringified on the server\n *\n * @param  {String} type - the type of data to convert\n * @param  {(String|Object|Array<Object>)} data - the data value\n * @return {Object} - the new injector\n */\n\nfunction generateServerInjector(options, metaInfo, globalInjectOptions) {\n  var serverInjector = {\n    data: metaInfo,\n    extraData: undefined,\n    addInfo: function addInfo(appId, metaInfo) {\n      this.extraData = this.extraData || {};\n      this.extraData[appId] = metaInfo;\n    },\n    callInjectors: function callInjectors(opts) {\n      var m = this.injectors; // only call title for the head\n\n      return (opts.body || opts.pbody ? '' : m.title.text(opts)) + m.meta.text(opts) + m.base.text(opts) + m.link.text(opts) + m.style.text(opts) + m.script.text(opts) + m.noscript.text(opts);\n    },\n    injectors: {\n      head: function head(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln\n        }));\n      },\n      bodyPrepend: function bodyPrepend(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln,\n          pbody: true\n        }));\n      },\n      bodyAppend: function bodyAppend(ln) {\n        return serverInjector.callInjectors(_objectSpread2(_objectSpread2({}, globalInjectOptions), {}, {\n          ln: ln,\n          body: true\n        }));\n      }\n    }\n  };\n\n  var _loop = function _loop(type) {\n    if (metaInfoOptionKeys.includes(type)) {\n      return \"continue\";\n    }\n\n    serverInjector.injectors[type] = {\n      text: function text(injectOptions) {\n        var addSsrAttribute = injectOptions === true;\n        injectOptions = _objectSpread2(_objectSpread2({\n          addSsrAttribute: addSsrAttribute\n        }, globalInjectOptions), injectOptions);\n\n        if (type === 'title') {\n          return titleGenerator(options, type, serverInjector.data[type], injectOptions);\n        }\n\n        if (metaInfoAttributeKeys.includes(type)) {\n          var attributeData = {};\n          var data = serverInjector.data[type];\n\n          if (data) {\n            var appId = injectOptions.isSSR === false ? '1' : options.ssrAppId;\n\n            for (var attr in data) {\n              attributeData[attr] = _defineProperty({}, appId, data[attr]);\n            }\n          }\n\n          if (serverInjector.extraData) {\n            for (var _appId in serverInjector.extraData) {\n              var _data = serverInjector.extraData[_appId][type];\n\n              if (_data) {\n                for (var _attr in _data) {\n                  attributeData[_attr] = _objectSpread2(_objectSpread2({}, attributeData[_attr]), {}, _defineProperty({}, _appId, _data[_attr]));\n                }\n              }\n            }\n          }\n\n          return attributeGenerator(options, type, attributeData, injectOptions);\n        }\n\n        var str = tagGenerator(options, type, serverInjector.data[type], injectOptions);\n\n        if (serverInjector.extraData) {\n          for (var _appId2 in serverInjector.extraData) {\n            var _data2 = serverInjector.extraData[_appId2][type];\n            var extraStr = tagGenerator(options, type, _data2, _objectSpread2({\n              appId: _appId2\n            }, injectOptions));\n            str = \"\".concat(str).concat(extraStr);\n          }\n        }\n\n        return str;\n      }\n    };\n  };\n\n  for (var type in defaultInfo) {\n    var _ret = _loop(type);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return serverInjector;\n}\n\n/**\n * Converts the state of the meta info object such that each item\n * can be compiled to a tag string on the server\n *\n * @vm {Object} - Vue instance - ideally the root component\n * @return {Object} - server meta info with `toString` methods\n */\n\nfunction inject(rootVm, options, injectOptions) {\n  // make sure vue-meta was initiated\n  if (!rootVm[rootConfigKey]) {\n    showWarningNotSupported();\n    return {};\n  } // collect & aggregate all metaInfo $options\n\n\n  var rawInfo = getComponentMetaInfo(options, rootVm);\n  var metaInfo = getMetaInfo(options, rawInfo, serverSequences, rootVm); // generate server injector\n\n  var serverInjector = generateServerInjector(options, metaInfo, injectOptions); // add meta info from additional apps\n\n  var appsMetaInfo = getAppsMetaInfo();\n\n  if (appsMetaInfo) {\n    for (var additionalAppId in appsMetaInfo) {\n      serverInjector.addInfo(additionalAppId, appsMetaInfo[additionalAppId]);\n      delete appsMetaInfo[additionalAppId];\n    }\n\n    clearAppsMetaInfo(true);\n  }\n\n  return serverInjector.injectors;\n}\n\nfunction $meta(options) {\n  options = options || {};\n  /**\n   * Returns an injector for server-side rendering.\n   * @this {Object} - the Vue instance (a root component)\n   * @return {Object} - injector\n   */\n\n  var $root = this.$root;\n  return {\n    getOptions: function getOptions$1() {\n      return getOptions(options);\n    },\n    setOptions: function setOptions(newOptions) {\n      var refreshNavKey = 'refreshOnceOnNavigation';\n\n      if (newOptions && newOptions[refreshNavKey]) {\n        options.refreshOnceOnNavigation = !!newOptions[refreshNavKey];\n        addNavGuards($root);\n      }\n\n      var debounceWaitKey = 'debounceWait';\n\n      if (newOptions && debounceWaitKey in newOptions) {\n        var debounceWait = parseInt(newOptions[debounceWaitKey]);\n\n        if (!isNaN(debounceWait)) {\n          options.debounceWait = debounceWait;\n        }\n      }\n\n      var waitOnDestroyedKey = 'waitOnDestroyed';\n\n      if (newOptions && waitOnDestroyedKey in newOptions) {\n        options.waitOnDestroyed = !!newOptions[waitOnDestroyedKey];\n      }\n    },\n    refresh: function refresh$1() {\n      return refresh($root, options);\n    },\n    inject: function inject$1(injectOptions) {\n      return  inject($root, options, injectOptions) ;\n    },\n    pause: function pause$1() {\n      return pause($root);\n    },\n    resume: function resume$1() {\n      return resume($root);\n    },\n    addApp: function addApp$1(appId) {\n      return addApp($root, appId, options);\n    }\n  };\n}\n\nfunction generate(rawInfo, options) {\n  options = setOptions(options);\n  var metaInfo = getMetaInfo(options, rawInfo, serverSequences);\n  var serverInjector = generateServerInjector(options, metaInfo);\n  return serverInjector.injectors;\n}\n\n/**\n * Plugin install function.\n * @param {Function} Vue - the Vue constructor.\n */\n\nfunction install(Vue, options) {\n  if (Vue.__vuemeta_installed) {\n    return;\n  }\n\n  Vue.__vuemeta_installed = true;\n  options = setOptions(options);\n\n  Vue.prototype.$meta = function () {\n    return $meta.call(this, options);\n  };\n\n  Vue.mixin(createMixin(Vue, options));\n}\n\nvar index = {\n  version: version,\n  install: install,\n  generate: function generate$1(metaInfo, options) {\n    return  generate(metaInfo, options) ;\n  },\n  hasMetaInfo: hasMetaInfo\n};\n\nexport default index;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-meta/dist/vue-meta.esm.js\n// module id = f3bp\n// module chunks = 0","'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/deepmerge/dist/cjs.js\n// module id = i3rX\n// module chunks = 0"],"sourceRoot":""}